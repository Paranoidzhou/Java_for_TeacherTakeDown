Shoot射击游戏第一天:
1.创建6个对象类，并创建World类测试

Shoot射击游戏第二天:
1.创建了6个对象类的构造方法，在World类中测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承超类
3.给FlyingObject超类设计了两个构造方法，6个派生类中分别调用

Shoot射击游戏第四天:
1.将小敌机数组、大敌机数组、小蜜蜂数组合为FlyingObject数组
2.在6个派生类中重写step()
3.画窗口


回顾:
1.引用类型数组:
    Student[] stus = new Student[3];
	stus[0] = new Student();

	int[][] arr = new int[3][];
	arr[0] = new int[2];
2.继承:
    代码复用，extends，
	超类:共有的  派生类:特有的
	派生类继承超类后，派生类具有:超类+派生类的
	单一继承、传递性
	构造派生类之前必须先构造超类
	----派生类构造中若不调用超类构造，则默认super()调超类无参构造
	----若派生类中调用了超类构造，则不再默认提供
3.super:指代当前对象的超类对象
   super.成员变量名-------------访问超类的成员变量
   super.方法名()---------------调用超类的方法
   super()----------------------调用超类的构造方法



笔记:
1.向上造型:
  1)超类型的引用指向派生类对象
  2)能点出来什么，看引用的类型
2.方法的重写(Override):重新写、覆盖
  1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
  2)重写方法被调用时，看对象的类型
  3)重写遵循"两同两小一大"原则:
    3.1)两同:
	    3.1.1)方法名相同
		3.1.2)参数列表相同
	3.2)两小:
	    3.2.1)派生类方法的返回值类型小于或等于超类方法的
		      3.2.1.1)void时，必须相等
			  3.2.1.2)基本类型时，必须相等
			  3.2.1.3)引用类型时，小于或等于
		3.2.2)派生类方法抛出的异常小于或等于超类方法的------API讲异常时
	3.3)一大:
	    3.3.1)派生类方法的访问权限大于或等于超类方法的------明天讲
3.重写与重载的区别:---------常见面试题
  1)重写:
    1.1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
	1.2)遵循"运行期绑定"，看对象的类型来调用方法
  2)重载:
    2.1)发生在一个类中，方法名称相同，参数列表不同，方法体不同
	2.2)遵循"编译期绑定"，看引用/参数的类型来绑定方法

练习:
1.将今天的项目代码重做两次
  1)将小敌机数组、大敌机数组、小蜜蜂数组合为FlyingObject数组
  2)在6个派生类中重写step()
  3)画窗口

当日事当日毕














swing相关:
1)JFrame:框架(相框)
2)JPanel:面板(相板)



















C/S:客户端/服务器
B/S:浏览器/服务器-----------------你们所参与的

C/S端-------本身java就没那么火过
C-----------微软是老大

java













OverrideOverloadDemo









编译期:.java源文件，经过编译，生成.class字节码文件--检测语法
运行期:JVM加载.class并运行.class


内存管理:由JVM来管理的











OverrideDemo






















我继承了一个中餐馆

A:我还是想做中餐-----------------不需要重写
B:我想改做西餐-------------------需要重写
C:我想在中餐基础之上加西餐-------需要重写(先super后重写)















Boo o1 = new Boo();
o1.show();------------------222
Aoo o3 = new Boo();
o3.show();------------------222





Aoo o2 = new Aoo();
o2.show();------------------111




class Aoo{
  void show(){
    输出111
  }
}
class Boo extends Aoo{
  void show(){
    输出222
  }
}


















class World{
  FlyingObject[] enemies;
  FlyingObject[] enemies = null;

  FlyingObject[] enemies = {};
  FlyingObject[] enemies = new FlyingObject[0];  
}

for(int i=0;i<enemies.length;i++){
  enemies[i].step();
}















小敌机、大敌机、小蜜蜂-------------敌人



FlyingObject[] fs = new FlyingObject[8];
fs[0] = new Bee();
















FlyingObject o1 = new Airplane();
FlyingObject o2 = new BigAirplane();
FlyingObject o3 = new Bee();
FlyingObject o4 = new Hero();
FlyingObject o5 = new Sky();
FlyingObject o6 = new Bullet(100,200);

o1.FlyingObject类中有的
o2.FlyingObject类中有的
o3.FlyingObject类中有的
o4.FlyingObject类中有的
o5.FlyingObject类中有的
o6.FlyingObject类中有的


Person p1 = new Student();
Person p2 = new Teacher();
Person p3 = new Doctor();
p1.Person类中有的
p2.Person类中有的
p3.Person类中有的



Animal o3 = new Tiger();
o3.Animal类中有的


class Animal{ //动物
}
class Tiger extends Animal{ //老虎
}











//动物是动物
Animal o1 = new Animal();
//老虎是老虎
Tiger o2 = new Tiger();
//老虎是动物
Animal o3 = new Tiger();

//动物是老虎-----语义不通
Tiger o4 = new Animal(); //编译错误

class Animal{ //动物
}
class Tiger extends Animal{ //老虎
}















