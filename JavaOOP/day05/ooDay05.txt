Shoot射击游戏第一天:
1.创建6个对象类，并创建World类测试

Shoot射击游戏第二天:
1.创建了6个对象类的构造方法，在World类中测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承超类
3.给FlyingObject超类设计了两个构造方法，6个派生类中分别调用

Shoot射击游戏第四天:
1.将小敌机数组、大敌机数组、小蜜蜂数组合为FlyingObject数组
2.在6个派生类中重写step()
3.画窗口

Shoot射击游戏第五天:
1.将类中的成员添加访问控制修饰符
2.设置图片属性


回顾:
1.向上造型:
  1)超类型的引用指向派生类的对象
  2)能点出来什么，看引用的类型
2.方法的重写(Override):
  1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
  2)重写方法被调用时，看对象的类型
3.重写与重载的区别:
  1)重写(Override):
    1.1)发生在父子类中，方法名称相同，参数列表相同，方法体不同
	1.2)"运行期"绑定，看对象类型来调用方法
  2)重载(overload):
    2.1)发生在一个类中，方法名称相同，参数列表不同，方法体不同
	2.2)"编译期"绑定，看引用/参数类型来绑定方法




笔记:
1.package:
  1)作用:避免类名冲突
  2)包名可以有层次结构
  3)类的全称为: 包名.类名
  4)建议:包名所有字母都小写
  import:
  1)同包中的类可以直接访问，
    不同包中的类不能直接访问，想访问只有如下两种方式:
	1.1)先import声明类再使用类----建议
	1.2)类的全称------------------太繁琐，不建议
2.访问控制修饰符:
  1)public:公开的，任何类
  2)private:私有的，本类
  3)protected:受保护的，本类、子类、同包类
  4)默认的:什么也不写，本类、同包类
  说明:
    1)类的访问修饰只能是public和默认的
	2)类中成员的访问修饰如上四种都可以
3.final:最终的、不可改变的---------------应用率低
  1)修饰变量:变量不能被改变
  2)修饰方法:方法不能被重写
  3)修饰类:类不能被继承
4.static:静态的
  1)静态变量:
    1.1)由static修饰
	1.2)属于类，存储在方法区中，只有一份
	1.3)常常通过类名点来访问
	1.4)何时用:所有对象所共享的数据(图片、音频、视频等)
  2)静态方法:
    2.1)由static修饰
	2.2)属于类，存储在方法区中，只有一份
	2.3)常常通过类名点来访问
	2.4)静态方法中没有隐式的this传递，
	    静态方法中不能直接访问实例成员
	2.5)何时用:方法的操作仅与参数相关而与对象无关
  3)静态块:
    3.1)属于类，在类被加载期间自动执行，
	    因类只加载一次，所以静态块也只执行一次
	3.2)何时用:加载/初始化静态资源(图片、音频、视频等)
5.static final常量:------今天自学，明天讲


练习:
1.将今天的项目代码重写两次
2.代码格式改好
















异常
异常处理

需要对文件进行操作，对文件操作特别容易出现异常
------强制做文件操作时，必须要加入异常处理
















窗口
想画对象，先有图片-------给6个对象类准备图片属性


能否将图片设计在超类FlyingObject中
--------------------------------------不能


private static BufferedImage image;



读图片

6个对象类的static块中-------都得去读图片
















实例变量多还是静态变量多?----------------实例变量多
实例方法多还是静态方法多?----------------实例方法多
















一般的方法都是与对象有关的
















Arrays.sort(arr);----------------静态的

无论a1,a2,a3,...,a100中的哪一个对象
去sort(arr)最终的结果都是一样的
---说明sort()这个方法的执行仅与参数相关而与对象无关

假设sort()不是静态的:
  Arrays a1 = new Arrays();
  a1.sort(arr);

  Arrays a2 = new Arrays();
  a2.sort(arr);

  Arrays a3 = new Arrays();
  a3.sort(arr);


















double a = Math.sqrt(25);------------静态的

无论m1,m2,m3,...,m100中的哪一个对象
去sqrt(25)最终的结果都是一样的
---说明sqrt()这个方法仅与参数相关而与对象无关

假设sqrt()不是静态的:
  Math m1 = new Math();
  double a = m1.sqrt(25); //5.0

  Math m2 = new Math();
  double b = m2.sqrt(25);

  Math m3 = new Math();
  double b = m3.sqrt(25);














Scanner scan = new Scanner(System.in);
int a = scan.nextInt();
double b = scan.nextDouble();---------------实例方法

double c = Math.random();
double d = Math.sqrt(25);
int[] b = Arrays.copyOf(a,6);
Arrays.sort(arr);



















小敌机------------图片















map.jpg--------------------图片(只有一份)
意外.mp4-------------------音频(只有一份)
无间道2.avi----------------视频(只有一份)
























成员变量:
1)实例变量:没有static，属于对象的，存储在堆中，
           有几个对象就有几个
           通过对象名点来访问
2)静态变量:由static修饰，属于类的，存储在方法区中，
           只有一份
		   通过类名点来访问


堆:new出来的对象(包括实例变量)
栈:局部变量
方法区:.class字节码文件(包括方法、静态变量)
















class Aoo{
  int a;
  static int b;
}


















方法:
1)公开的---------------public

成员变量:
1)超类中的成员变量---------protected
2)普通类中的成员变量-------private



















数据(变量)私有化(private)，行为(方法)公开化(public)

class Card{
  private String cardId;
  private String cardPwd;
  private double balance;

  public boolean payMoney(double money){
    if(balance>=money){
	  balance-=money;
	  return true;
	}else{
	  return false;
	}
  }

  public boolean checkPwd(String pwd){
    if(cardPwd.equals(pwd)){
	  return true;
	}else{
	  return false;
	}
  }

  

}
















import java.util.Scanner;
Scanner scan = new Scanner(System.in);
int a = scan.nextInt();
double b = scan.nextDouble();
String c = scan.next();


package java.util;
class Scanner{
  Scanner(Stream s){
  }
  int nextInt(){
  }
  double nextDouble(){
  }
  String next(){
  }
}

















民生银行

A公司:
  package a.b.c;
  class Aoo{
  }

B公司:
  package a.b.c;
  class Aoo{
  }


可移植性


建议:
  域名反写   . 项目名称 . 模块名称        . 类名
  cn.tedu    . aproject . stumanager      .
  cn.tedu    . aproject . teachermanager  .












  cn.tedu    . bproject




  com.taobao .















package a.b.c.d.e;
class Aoo{
}
package a.b.c.d.e;
class Aoo{
}


















  项目           包           类
东日瑞景      4号楼2单元      601





















访问控制修饰符-----------一个案例
static-------------------一个案例














