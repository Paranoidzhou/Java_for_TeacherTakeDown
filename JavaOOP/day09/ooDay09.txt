Shoot射击游戏第一天:
1.创建6个对象类，并创建World类测试

Shoot射击游戏第二天:
1.创建了6个对象类的构造方法，在World类中测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承超类
3.给FlyingObject超类设计了两个构造方法，6个派生类中分别调用

Shoot射击游戏第四天:
1.将小敌机数组、大敌机数组、小蜜蜂数组合为FlyingObject数组
2.在6个派生类中重写step()
3.画窗口

Shoot射击游戏第五天:
1.将类中的成员添加访问控制修饰符
2.设置图片属性

Shoot射击游戏第六天:
1.画对象:
  1)想画对象，得先去获取对象的图片，
    每个对象都得获取图片，意味着获取图片行为为共有的行为，
	  所以需要将获取图片的行为设计在FlyingObject超类中，
    每个对象获取图片的行为都是不一样的，
      所以获取图片的行为设计为抽象方法
	--------在FlyingObject类中设计抽象方法getImage()
  2)在获取对象的图片时，需要去考虑对象的状态(生命周期)，
    状态分三种(活着的、死了的(未删除)、删除的)，
	在实际应用中，状态都应设计为常量，
	每个对象都有状态，所以将状态设计在FlyingObject超类中，
	--------在FlyingObject类中设计三个常量和变量(存储当前状态)
    在获取图片时，需要去判断每个对象的状态，用于获取不同的图片，
	所以对象状态判断的行为为共有的行为，设计在FlyingObject超类中，
	每个对象判断状态的行为都是一样的，设计为普通方法
	--------在FlyingObject类中设计isLife()/isDead()/isRemove()
  3)在派生类中重写getImage()用于在不同状态下获取不同的图片
    3.1)Sky天空，直接返回image
	3.2)Bullet子弹:
	    3.2.1)若活着的，直接返回image
		3.2.2)若死了的，就删除
    3.3)Airplane小敌机:
        3.3.1)若活着呢，返回第1张图片
        3.3.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
    3.4)Airplane小敌机:
        3.4.1)若活着呢，返回第1张图片
        3.4.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
	3.5)Airplane小敌机:
        3.5.1)若活着呢，返回第1张图片
        3.5.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
    3.6)Hero英雄机:
	    3.6.1)若活着呢，返回2张图片的切换
  4)图片有了，就可以开画了，6个对象都可开画，属于共有的行为，
      所以将画的行为设计在FlyingObject超类中，
	所有对象画的行为都是一样的，所以设计为普通方法
	--------在FlyingObject超类中设计普通方法paintObject()画对象
  5)因为Sky天空是两张图，所以需要重写超类的paintObject()
    --------在Sky类中重写paintObject()
  6)画的行为完以后，只需要在窗口上调用即可
    --------在World类中重写paint()，而后调用paintObject()

Shoot射击游戏第七天:
1.敌人入场:
  1)敌人是由窗口产生的，所以在World中设计nextOne()生成敌人对象
  2)敌人入场为定时发生的，在run()中调用enterAction()实现敌人入场
    在enterAction()中:
	  每400毫秒调用nextOne()获取敌人，enemies扩容，装在最后一个元素上
2.子弹入场:
  1)子弹是由英雄机发射出来的，所以在Hero中设计shoot()生成子弹对象
  2)子弹入场为定时发生的，在run()中调用shootAction()实现子弹入场
    在shootAction()中:
	  每300毫秒调用hero的shoot()获取子弹，bullets扩容，数组追加
3.飞行物移动:
  1)移动是所有对象所共有的行为，并且每个对象移动的形为都是不一样的，
    所以在超类FlyingObject中设计了抽象方法step()，派生类重写step()
  2)飞行物移动为定时发生的，在run()中调用stepAction()实现飞行物移动
    在stepAction()中:
	  天空动，遍历敌人而后敌人动，遍历子弹而后子弹动

Shoot射击游戏第八天:
1.英雄机随着鼠标移动:
  1)英雄机移动是英雄机的行为，所以在Hero中设计moveTo(x,y)实现英雄机随着鼠标移动
  2)英雄机随着鼠标移动是事件触发的，在侦听器中重写mouseMoved()鼠标移动事件
    在mouseMoved()中:
	  获取鼠标的x和y坐标，而后英雄机随着动
2.删除越界的飞行物:
  1)越界检查为所有飞行物都具备的行为，只是每个对象的具体行为不一样，
    在超类FlyingObject中设计抽象方法outOfBounds()，6个派生类中分别重写
  2)删除越界飞行物为定时发生的，所以在run()中调用outOfBoundsAction()
    在outOfBoundsAction()中:
	  声明不越界敌人/子弹数组，遍历enemies/bullets，获取每个敌人或子弹
	  判断若不越界，则将对象添加到不越界敌人/子弹数组中，
	  将不越界敌人/子弹数组复制到enemies/bullets中
3.设计Enemy得分接口，而后Airplane和BigAirplane实现接口
  设计Award奖励接口，而后Bee实现接口

Shoot射击游戏第九天:
1.子弹与敌人的碰撞:
  1)在超类FlyingObject中设计hit()实现敌人与子弹/英雄机的碰撞
    在超类FlyingObject中设计goDead()实现飞行物去死
	在Hero类中设计addLife()增命、addDoubleFire()增火力
  2)子弹与敌人的碰撞为定时发生的，所以在run()中调用bulletBangAction()实现子弹与敌人的碰撞
    在bulletBangAction()中:
	  遍历所有子弹，获取每个子弹，遍历所有敌人，获取每个敌人，
	  判断是否撞上了，若撞上了则:
	    2.1)子弹去死、敌人去死
		2.2)若撞了小敌机和大敌机，则玩家得分
		    若撞了小蜜蜂，则英雄机得奖励
2.画分和画命:
  1)在Hero类中设计getLife()获取命
  2)在paint()方法中，画分和画命









回顾:
1.接口:
    引用类型，interface定义，只能包含常量和抽象方法
    不能被实例化，是需要被实现的，实现类:必须重写所有抽象方法
    一个类可以实现多个接口，用逗号分隔，先继承后实现
	接口可以继承接口


笔记:
1.多态:
  1)意义:
    1.1)同一类型的引用指向不同的对象时，有不同的实现
	    --------行为的多态:cut()、run()、step()...
	1.2)同一个对象被造型为不同的类型时，有不同的功能
	    --------对象的多态:我、你、水...
  2)向上造型/自动类型转换:
    2.1)超类型的引用指向派生类的对象
	2.2)能造型成为的类型有:超类+所实现的接口
	2.3)能点出来什么，看引用的类型
  3)强制类型转换，成功的条件只有如下两种:
    3.1)引用所指向的对象就是该类型
	3.2)引用所指向的对象实现了该接口/继承了该类
  4)强转若不符合如上两个条件，则发生ClassCastException类型转换异常
    建议:强转之前先通过instanceof来判断引用所指向的对象是否是该类型




1)打桩
2)快速定位错误位置
3)单元测试
4)Debug调试工具



















若撞上了:
1)子弹去死，敌人去死
2)小敌机和大敌机------------玩家得分
  小蜜蜂--------------------英雄机增命、增火力


int score = 0; //得分
public void bulletBangAction(){ //10毫秒
  for(int j=0;j<enemies.length;j++){
	FlyingObject f = enemies[j];
    for(int i=0;i<bullets.length;i++){
      Bullet b = bullets[i];
	  if(b.isLife() && f.isLife() && f.hit(b)){ //撞上了
        b.goDead();
		f.goDead();

        if(f instanceof Enemy){
		  Enemy en = (Enemy)f;
		  score += en.getScore();
		}
		if(f instanceof Award){
		  Award aw = (Award)f;
          int type = aw.getType();
          switch(type){
		  case Award.DOUBLE_FIRE:
		    hero.addDoubleFire();
			break;
          case Award.LIFE:
		    hero.addLife();
			break;
		  }
		}












        if(f instanceof Airplane){
		  Airplane a = (Airplane)f;
          score += a.getScore();
		}
		if(f instanceof BigAirplane){
		  BigAirplane ba = (BigAirplane)f;
          score += ba.getScore();
		}
		if(f instanceof BigYellowBee){
		  BigYellowBee byb = (BigYellowBee)f;
          score += byb.getScore();
          int type = byb.getType();
          switch(type){
		  case Award.DOUBLE_FIRE:
		    hero.addDoubleFire();
			break;
          case Award.LIFE:
		    hero.addLife();
			break;
		  }
		}
		if(f instanceof Bee){
		  Bee be = (Bee)f;
          int type = be.getType();
          switch(type){
		  case Award.DOUBLE_FIRE:
		    hero.addDoubleFire();
			break;
          case Award.LIFE:
		    hero.addLife();
			break;
		  }
		}

	  }
    }
  }

}

class BigYellowBee extends FlyingObject implements Enemy,Award{
  public int getScore(){ return 5; }
  public int getType(){ return ?; }
}
















子弹与敌人的碰撞

class FlyingObject{ //敌人
  public boolean hit(FlyingObject obj){
    //this:敌人
	//obj:子弹
  }
}




英雄机与敌人的碰撞:





goDead()


















MultiTypeDemo














Aoo o = new Boo();
Boo o1 = (Boo)o; //符合条件1
Inter1 o2 = (Inter1)o; //符合条件2
//Coo o3 = (Coo)o; //类型转换异常
if(o instanceof Boo){ //false
  Boo o4 = (Boo)o;
}

System.out.println(o instanceof Boo);    //true
System.out.println(o instanceof Inter1); //true
System.out.println(o instanceof Coo);    //false

class Inter1{}
class Aoo{}
class Boo extends Aoo implements Inter1{}
class Coo extends Aoo{}
















Airplane     o1 = new Airplane();
FlyingObject o2 = new Airplane();
Enemy        o3 = new Airplane();












我 me = new 我();
讲师       o1 = me;
孩子他妈   o2 = me;
老公的老婆 o3 = me;

o1.授课();
o2.揍他();
o3.咬他();
o3.收工资();

me.授课();
me.揍他();
me.咬他();
me.收工资();


interface 讲师{
  void 授课();
}
interface 孩子他妈{
  void 揍他();
}
interface 老公的老婆{
  void 咬他();
  void 收工资();
}
class 我 implements 讲师,孩子他妈,老公的老婆{
  public void 授课(){}
  public void 揍他(){}
  public void 咬他(){}
  public void 收工资(){}
}















动物 o1 = new 老虎();
动物 o2 = new 鸟();
动物 o3 = new 鱼();
o1.run(); //地
o2.run(); //天
o3.run(); //水


abstract class 动物{
  abstract void run();
}
class 老虎 extends 动物{
  void run(){在地上跑}
}
class 鸟 extends 动物{
  void run(){在天上飞}
}
class 鱼 extends 动物{
  void run(){在水里游}
}













人 p1 = new 理发师();
人 p2 = new 外科医生();
人 p3 = new 演员();
p1.cut(); //剪发
p2.cut(); //开刀
p3.cut(); //停止表演

abstract class 人{
  abstract void cut();
}
class 理发师 extends 人{
  void cut(){剪发}
}
class 外科医生 extends 人{
  void cut(){开刀}
}
class 演员 extends 人{
  void cut(){停止表演}
}























项目功能:
1)子弹与敌人的碰撞
2)画分和画命












