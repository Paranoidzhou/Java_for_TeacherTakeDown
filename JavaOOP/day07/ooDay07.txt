Shoot射击游戏第一天:
1.创建6个对象类，并创建World类测试

Shoot射击游戏第二天:
1.创建了6个对象类的构造方法，在World类中测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承超类
3.给FlyingObject超类设计了两个构造方法，6个派生类中分别调用

Shoot射击游戏第四天:
1.将小敌机数组、大敌机数组、小蜜蜂数组合为FlyingObject数组
2.在6个派生类中重写step()
3.画窗口

Shoot射击游戏第五天:
1.将类中的成员添加访问控制修饰符
2.设置图片属性

Shoot射击游戏第六天:
1.画对象:
  1)想画对象，得先去获取对象的图片，
    每个对象都得获取图片，意味着获取图片行为为共有的行为，
	  所以需要将获取图片的行为设计在FlyingObject超类中，
    每个对象获取图片的行为都是不一样的，
      所以获取图片的行为设计为抽象方法
	--------在FlyingObject类中设计抽象方法getImage()
  2)在获取对象的图片时，需要去考虑对象的状态(生命周期)，
    状态分三种(活着的、死了的(未删除)、删除的)，
	在实际应用中，状态都应设计为常量，
	每个对象都有状态，所以将状态设计在FlyingObject超类中，
	--------在FlyingObject类中设计三个常量和变量(存储当前状态)
    在获取图片时，需要去判断每个对象的状态，用于获取不同的图片，
	所以对象状态判断的行为为共有的行为，设计在FlyingObject超类中，
	每个对象判断状态的行为都是一样的，设计为普通方法
	--------在FlyingObject类中设计isLife()/isDead()/isRemove()
  3)在派生类中重写getImage()用于在不同状态下获取不同的图片
    3.1)Sky天空，直接返回image
	3.2)Bullet子弹:
	    3.2.1)若活着的，直接返回image
		3.2.2)若死了的，就删除
    3.3)Airplane小敌机:
        3.3.1)若活着呢，返回第1张图片
        3.3.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
    3.4)Airplane小敌机:
        3.4.1)若活着呢，返回第1张图片
        3.4.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
	3.5)Airplane小敌机:
        3.5.1)若活着呢，返回第1张图片
        3.5.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
    3.6)Hero英雄机:
	    3.6.1)若活着呢，返回2张图片的切换
  4)图片有了，就可以开画了，6个对象都可开画，属于共有的行为，
      所以将画的行为设计在FlyingObject超类中，
	所有对象画的行为都是一样的，所以设计为普通方法
	--------在FlyingObject超类中设计普通方法paintObject()画对象
  5)因为Sky天空是两张图，所以需要重写超类的paintObject()
    --------在Sky类中重写paintObject()
  6)画的行为完以后，只需要在窗口上调用即可
    --------在World类中重写paint()，而后调用paintObject()

Shoot射击游戏第七天:
1.敌人入场:
  1)敌人是由窗口产生的，所以在World中设计nextOne()生成敌人对象
  2)敌人入场为定时发生的，在run()中调用enterAction()实现敌人入场
    在enterAction()中:
	  每400毫秒调用nextOne()获取敌人，enemies扩容，装在最后一个元素上
2.子弹入场:
  1)子弹是由英雄机发射出来的，所以在Hero中设计shoot()生成子弹对象
  2)子弹入场为定时发生的，在run()中调用shootAction()实现子弹入场
    在shootAction()中:
	  每300毫秒调用hero的shoot()获取子弹，bullets扩容，数组追加
3.飞行物移动:
  1)移动是所有对象所共有的行为，并且每个对象移动的形为都是不一样的，
    所以在超类FlyingObject中设计了抽象方法step()，派生类重写step()
  2)飞行物移动为定时发生的，在run()中调用stepAction()实现飞行物移动
    在stepAction()中:
	  天空动，遍历敌人而后敌人动，遍历子弹而后子弹动












回顾:
1.static final常量:
   必须声明同时初始化，类名点，不能改变
   编译时直接被替换为具体的值，效率高
   数据永远不变，经常使用
2.抽象方法:
   abstract，只有方法的定义，没有具体的实现
3.抽象类:
   abstract，包含抽象方法的类必须是抽象类
   不能被实例化
   是需要被继承的，派生类:
     1)重写抽象类中的所有抽象方法
	 2)也声明为抽象类
   意义:代码复用、向上造型、
        可以包含抽象方法，为所有派生类提供统一的入口
		派生类中重写的实现不同，但入口是一致的


正课:
1.成员内部类: 应用率低
  1)类中套类，里面的称为Inner内部类，外面的称为Outer外部类
  2)内部类通常只服务于外部类，对外不具备可见性
  3)内部类通常是在外部类中创建的
  4)内部类中可以直接访问外部类的成员(包括私有的)
    内部类中有一个隐式的引用指向了创建它的外部类对象
      eg: 外部类名.this.
2.匿名内部类:
  1)若想创建一个类的对象，并且对象只被创建一次，
    此时该类不必命名，称之为匿名内部类
  2)jdk1.7(含)版本之前，匿名内部类中想访问外面的变量，
    要求该变量必须是final的



常见面试题:
  问:内部类有独立的.class吗?
  答:有



功能实现步骤:
1.先写行为(方法):
  1)若是某个对象特有的行为，则将行为设计在派生类中
    若是所有对象共有的行为，则将行为设计在超类中
	1.1)所有派生类行为都一样，设计为普通方法
	1.2)所有派生类行为都不一样，设计为抽象方法，而后派生类重写
2.窗口调用:
  1)定时触发的，在run()中调用
  2)事件触发的，在侦听器中调用
  3)画出来的，在paint()中调用






















找问题最简单的方式就是打桩
  System.out.println(数据);


















Bullet[] bs = hero.shoot();
bullets = Arrays.copyOf(bullets,bullets.length+bs.length);
System.arraycopy(bs,0,bullets,bullets.length-bs.length,bs.length); //数组的追加














if(bs.length>2){
  bullets[bullets.length-1] = bs[0];
  bullets[bullets.length-2] = bs[1];
  bullets[bullets.length-3] = bs[2];
}else if(bs.length>1){
  bullets[bullets.length-1] = bs[0];
  bullets[bullets.length-2] = bs[1];
}else{
  bullets[bullets.length-1] = bs[0];
}















项目功能:
1)敌人入场----------------定时发生
2)子弹入场----------------定时发生
3)飞行物移动--------------定时发生


paint()调用的方式只有两种:
1)frame.setVisible(true);
2)repaint();

















假设有5个敌人了，又来了一个

5个变6个









//生成敌人(小敌机、大敌机、小蜜蜂)对象
public FlyingObject nextOne(){
  随机
}

















敌人对象-------------------是由窗口创建出来的
----创建敌人对象的行为---------设计在窗口类World中






子弹对象-------------------是由英雄机发射出来的
----创建子弹对象的行为---------设计在英雄机类Hero中















敌人入场:
1)创建敌人对象
2)将对象添加到enemies数组中


子弹入场:
1)创建子弹对象
2)将对象添加到bullets数组中























项目功能:
1)敌人入场----------------定时发生
2)子弹入场----------------定时发生
3)飞行物移动--------------定时发生















              TimerTask,   long,    long
timer.schedule(new TimerTask(){
  public void run(){ //定时干的那个事----每10毫秒走一次
    //敌人入场、子弹入场、飞行物移动、
  }
},10,10);
















第1个10:从程序启动到第一次触发的时间间隔
第2个10:从第一次触发到第二次触发的时间间隔
        从第二次触发到第三次触发的时间间隔
		从第三次触发到第四次触发的时间间隔
		...

















定时器------定时的干一件事















字母、数字、_和$符


NstInnerClassDemo$1.class
NstInnerClassDemo$2.class
NstInnerClassDemo$3.class
Mama$Baby.class














jdk1.0到1.7----------------内存管理几乎没有改变
jdk1.8---------------------内存管理做了相当一部分的修改


1.6

















NstInnerClassDemo












Aoo o1 = new Aoo();
Boo o2 = new Boo(); //编译错误


class Aoo{
  private int a=5;
  void show(){
    Boo o2 = new Boo();
  }
  class Boo{
    void test(){
	  System.out.println(a);
	  System.out.println(Aoo.this.a);
	  System.out.println(this.a); //编译错误
	}
  }
}











































