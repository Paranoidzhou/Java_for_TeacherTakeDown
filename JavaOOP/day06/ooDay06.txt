Shoot射击游戏第一天:
1.创建6个对象类，并创建World类测试

Shoot射击游戏第二天:
1.创建了6个对象类的构造方法，在World类中测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承超类
3.给FlyingObject超类设计了两个构造方法，6个派生类中分别调用

Shoot射击游戏第四天:
1.将小敌机数组、大敌机数组、小蜜蜂数组合为FlyingObject数组
2.在6个派生类中重写step()
3.画窗口

Shoot射击游戏第五天:
1.将类中的成员添加访问控制修饰符
2.设置图片属性



Shoot射击游戏第六天:
1.画对象:
  1)想画对象，得先去获取对象的图片，
    每个对象都得获取图片，意味着获取图片行为为共有的行为，
	  所以需要将获取图片的行为设计在FlyingObject超类中，
    每个对象获取图片的行为都是不一样的，
      所以获取图片的行为设计为抽象方法
	--------在FlyingObject类中设计抽象方法getImage()
  2)在获取对象的图片时，需要去考虑对象的状态(生命周期)，
    状态分三种(活着的、死了的(未删除)、删除的)，
	在实际应用中，状态都应设计为常量，
	每个对象都有状态，所以将状态设计在FlyingObject超类中，
	--------在FlyingObject类中设计三个常量和变量(存储当前状态)
    在获取图片时，需要去判断每个对象的状态，用于获取不同的图片，
	所以对象状态判断的行为为共有的行为，设计在FlyingObject超类中，
	每个对象判断状态的行为都是一样的，设计为普通方法
	--------在FlyingObject类中设计isLife()/isDead()/isRemove()
  3)在派生类中重写getImage()用于在不同状态下获取不同的图片
    3.1)Sky天空，直接返回image
	3.2)Bullet子弹:
	    3.2.1)若活着的，直接返回image
		3.2.2)若死了的，就删除
    3.3)Airplane小敌机:
        3.3.1)若活着呢，返回第1张图片
        3.3.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
    3.4)Airplane小敌机:
        3.4.1)若活着呢，返回第1张图片
        3.4.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
	3.5)Airplane小敌机:
        3.5.1)若活着呢，返回第1张图片
        3.5.2)若死了呢，从第2张图到第5张图轮换，第5张图后可以删除了
    3.6)Hero英雄机:
	    3.6.1)若活着呢，返回2张图片的切换
  4)图片有了，就可以开画了，6个对象都可开画，属于共有的行为，
      所以将画的行为设计在FlyingObject超类中，
	所有对象画的行为都是一样的，所以设计为普通方法
	--------在FlyingObject超类中设计普通方法paintObject()画对象
  5)因为Sky天空是两张图，所以需要重写超类的paintObject()
    --------在Sky类中重写paintObject()
  6)画的行为完以后，只需要在窗口上调用即可
    --------在World类中重写paint()，而后调用paintObject()



























回顾:
1.package和import:
2.访问控制修饰符:
  1)public:任何类
  2)protected:本类、子类、同包类
  3)默认的:什么也不写，本类、同包类
  4)private:本类
3.final:不能变
   变量不能被改变，方法不能被重写，类不能被继承
4.static:静态的
    static，类，方法区，一份，类名点，
	  所有对象所共享的数据(图片、音频、视频等)
    static，类，方法区，一份，类名点，
	  静态方法没有隐式this，不能直接访问实例成员
	  方法的操作仅与参数相关而与对象无关
	static，类，在类被加载期间自动执行，一次
	  加载/初始化静态资源(图片、音频、视频等)


正课:
1.static final常量:
  1)必须声明同时初始化
  2)通过类名点来访问，不能被改变
  3)建议:常量名所有字母都大写，多个单词用_分隔
  4)编译器在编译时将常量直接替换为具体的值，效率高
  5)何时用:数据永远不变，并且经常使用
2.抽象方法:
  1)由abstract修饰
  2)只有方法的定义，没有具体的实现(连{}都没有)
3.抽象类:
  1)由abstract修饰
  2)包含抽象方法的类必须是抽象类
    不包含抽象方法的类也可以声明为抽象类-------我乐意
  3)抽象类不能被实例化
  4)抽象类都是需要被继承的，派生类:
    4.1)重写抽象类中的所有抽象方法-----变不完整为完整
	4.2)也声明为抽象类-----------------一般不这么做
  5)抽象类的意义:
    5.1)封装派生类所共有的属性和行为-----------代码复用
	5.2)为所有派生类提供统一的类型-------------向上造型
	5.3)可以包含抽象方法，为所有派生类提供统一的入口
	    派生类的具体实现不同，但入口是一致的




设计规则:
1)将所有派生类所共有的属性和行为，抽到超类中-------抽共性
2)所有派生类的行为都一样，设计为普通方法
  所有派生类的行为都不一样，设计为抽象方法
3)

























FlyingObject o = new Airplane();
FlyingObject o = new BigAirplane();


abstract class FlyingObject{
  width,height,x,y
  abstract void step();
}
class Airplane extends FlyingObject{
  void step(){ //y向下 }
}
class Bee extends FlyingObject{
  void step(){ //x和y都得变 }
}
class Bullet extends FlyingObject{
  void step(){ //y向上 }
}











new FlyingObject(); //编译错误
new FlyingObject[5]; //正确














abstract class Aoo{
  abstract void show();
}
class Boo extends Aoo{
  void show(){ //重写----变不完整为完整
  }
}















FlyingObject o = new FlyingObject(); //创建FlyingObject对象

FlyingObject[] o = new FlyingObject[3]; //创建FlyingObject数组对象

































NUMBER
COUNT
SCORE
MY_SCORE



























